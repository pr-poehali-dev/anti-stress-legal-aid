import json
import os
import urllib.request
import urllib.parse
import requests
from typing import Dict, Any
from datetime import datetime
import time

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≤ Telegram –±–æ—Ç —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–æ–π "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
    Args: event - dict —Å httpMethod, body, headers
          context - object —Å request_id –∏ –¥—Ä—É–≥–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    Returns: HTTP response dict
    '''
    method: str = event.get('httpMethod', 'POST')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    try:
        body_data = json.loads(event.get('body', '{}'))
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'})
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    name = body_data.get('name', '').strip()
    contact = body_data.get('contact', '').strip()
    service = body_data.get('service', '').strip()
    
    if not all([name, contact, service]):
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'})
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
    if service != '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞':
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞ "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN_NEW') or os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID_NEW') or os.environ.get('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
        }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    urgency = body_data.get('urgency', '–ù–µ–¥–µ–ª—è')
    message_text = body_data.get('message', '').strip()
    
    telegram_message = f"""üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –Æ—Ä–ó–∞—â–∏—Ç–∞!

üë§ –ö–ª–∏–µ–Ω—Ç: {name}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}
‚öñÔ∏è –£—Å–ª—É–≥–∞: {service}
‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text if message_text else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ –í—Ä–µ–º—è: {body_data.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Å retry –ª–æ–≥–∏–∫–æ–π
    telegram_success = False
    max_retries = 3
    
    for attempt in range(max_retries):
        try:
            telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            data = {
                'chat_id': chat_id,
                'text': telegram_message,
                'parse_mode': 'HTML'
            }
            
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            
            req = urllib.request.Request(
                telegram_url,
                data=encoded_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            with urllib.request.urlopen(req, timeout=15) as response:
                response_text = response.read().decode('utf-8')
                telegram_response = json.loads(response_text)
                
                if telegram_response.get('ok'):
                    telegram_success = True
                    break
                else:
                    error_msg = telegram_response.get('description', 'Unknown error')
                    # Don't retry on certain permanent errors
                    if 'chat not found' in error_msg.lower() or 'bot was blocked' in error_msg.lower():
                        break
                        
        except Exception as e:
            print(f"Telegram attempt {attempt + 1} failed: {str(e)}")
            
        # Wait before retry (except on last attempt)
        if attempt < max_retries - 1:
            time.sleep(1)
    
    # Handle result
    if telegram_success:
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'
            })
        }
    else:
        # Send backup email when Telegram fails
        try:
            email_data = body_data.copy()
            email_data['email_type'] = 'fallback'
            email_data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            response = requests.post(
                'https://functions.poehali.dev/d9ad4234-e20a-4f33-a228-7ae29e45b0b4',
                json=email_data,
                timeout=20,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200 and response.json().get('success'):
                return {
                    'statusCode': 200,
                    'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                    'body': json.dumps({
                        'success': True,
                        'message': 'Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ email',
                        'fallback': True
                    })
                }
        except:
            pass
        
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'})
        }