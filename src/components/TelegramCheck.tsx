import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';

export default function TelegramCheck() {
  const [isChecking, setIsChecking] = useState(false);
  const [lastResult, setLastResult] = useState<any>(null);

  const checkTelegramSettings = async () => {
    setIsChecking(true);
    try {
      toast.info('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
      
      const response = await fetch('https://functions.poehali.dev/caa09c80-487a-4b79-b4bc-8629fad14399', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setLastResult(result);
        
        if (result.success) {
          toast.success('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
        } else {
          const errorCount = result.errors?.length || 0;
          toast.error(`‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${errorCount}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –Ω–∏–∂–µ.`);
          
          if (result.recommendations?.length > 0) {
            result.recommendations.forEach((rec: string, index: number) => {
              setTimeout(() => {
                toast.info(`üí° ${rec}`, { duration: 8000 });
              }, (index + 1) * 1000);
            });
          }
        }
      } else {
        toast.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        setLastResult({ success: false, errors: ['–û—à–∏–±–∫–∞ HTTP ' + response.status] });
      }
    } catch (error) {
      console.error('Check error:', error);
      toast.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
      setLastResult({ success: false, errors: ['–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'] });
    }
    
    setIsChecking(false);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon name="MessageSquare" size={24} />
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-sm text-gray-600">
          –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–±–µ–¥–∏—Ç—Å—è, —á—Ç–æ –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        </p>
        
        <Button 
          onClick={checkTelegramSettings}
          disabled={isChecking}
          className="w-full"
        >
          {isChecking ? (
            <>
              <Icon name="Loader2" className="mr-2 animate-spin" size={16} />
              –ü—Ä–æ–≤–µ—Ä—è—é...
            </>
          ) : (
            <>
              <Icon name="Play" className="mr-2" size={16} />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
            </>
          )}
        </Button>

        {lastResult && (
          <div className="mt-4 p-4 rounded-lg bg-gray-50">
            <h4 className="font-medium mb-2">
              {lastResult.success ? '‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏' : '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'}
            </h4>
            
            {lastResult.checks && (
              <div className="space-y-1 text-sm">
                {Object.entries(lastResult.checks).map(([key, value]) => (
                  <div key={key} className="flex items-center gap-2">
                    {value ? '‚úÖ' : '‚ùå'}
                    <span className="capitalize">{key.replace(/_/g, ' ')}</span>
                  </div>
                ))}
              </div>
            )}
            
            {lastResult.bot_info && (
              <div className="mt-2 text-sm">
                <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</strong>
                <div>@{lastResult.bot_info.username} ({lastResult.bot_info.first_name})</div>
              </div>
            )}
            
            {lastResult.errors && lastResult.errors.length > 0 && (
              <div className="mt-2">
                <strong className="text-red-600">–û—à–∏–±–∫–∏:</strong>
                <ul className="list-disc list-inside text-sm text-red-600">
                  {lastResult.errors.map((error: string, index: number) => (
                    <li key={index}>{error}</li>
                  ))}
                </ul>
              </div>
            )}
            
            {lastResult.recommendations && lastResult.recommendations.length > 0 && (
              <div className="mt-2">
                <strong className="text-blue-600">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                <ul className="list-disc list-inside text-sm text-blue-600">
                  {lastResult.recommendations.map((rec: string, index: number) => (
                    <li key={index}>{rec}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
}