import json
import os
import urllib.request
import urllib.parse
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
    Args: event - dict —Å httpMethod
          context - object —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    Returns: HTTP response dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    '''
    method: str = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN_NEW') or os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID_NEW') or os.environ.get('TELEGRAM_CHAT_ID')
    
    result = {
        'success': False,
        'checks': {},
        'errors': [],
        'recommendations': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not bot_token:
        result['errors'].append('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω')
        result['recommendations'].append('–î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç TELEGRAM_BOT_TOKEN_NEW –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    else:
        result['checks']['token_exists'] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if ':' not in bot_token or len(bot_token) < 40:
            result['errors'].append('TELEGRAM_BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
            result['recommendations'].append('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 1234567890:XXXXXXXXXXXXXXXXXXXXXXX')
        else:
            result['checks']['token_format'] = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–∞–ª–∏—á–∏–µ chat_id
    if not chat_id:
        result['errors'].append('TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
        result['recommendations'].append('–î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç TELEGRAM_CHAT_ID_NEW –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    else:
        result['checks']['chat_id_exists'] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ chat_id
        if ':' in chat_id or len(chat_id) > 15:
            result['errors'].append('TELEGRAM_CHAT_ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–º–µ—Å—Ç–æ ID —á–∞—Ç–∞')
            result['recommendations'].append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã - –≤–æ–∑–º–æ–∂–Ω–æ TELEGRAM_CHAT_ID –∏ TELEGRAM_BOT_TOKEN –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã –º–µ—Å—Ç–∞–º–∏')
        else:
            result['checks']['chat_id_format'] = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
    if bot_token and ':' in bot_token and len(bot_token) >= 40:
        try:
            telegram_url = f"https://api.telegram.org/bot{bot_token}/getMe"
            
            req = urllib.request.Request(telegram_url)
            with urllib.request.urlopen(req, timeout=10) as response:
                response_text = response.read().decode('utf-8')
                telegram_response = json.loads(response_text)
                
                if telegram_response.get('ok'):
                    bot_info = telegram_response.get('result', {})
                    result['checks']['bot_api_connection'] = True
                    result['bot_info'] = {
                        'username': bot_info.get('username'),
                        'first_name': bot_info.get('first_name'),
                        'can_join_groups': bot_info.get('can_join_groups'),
                        'can_read_all_group_messages': bot_info.get('can_read_all_group_messages')
                    }
                else:
                    result['errors'].append(f"Telegram API error: {telegram_response.get('description', 'Unknown')}")
        except Exception as e:
            result['errors'].append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (bot_token and chat_id and 
        result['checks'].get('token_format') and 
        result['checks'].get('chat_id_format') and 
        result['checks'].get('bot_api_connection')):
        
        try:
            test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –Æ—Ä–ó–∞—â–∏—Ç–∞\\n\\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
            
            telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': test_message,
                'parse_mode': 'Markdown'
            }
            
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(
                telegram_url,
                data=encoded_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            with urllib.request.urlopen(req, timeout=10) as response:
                response_text = response.read().decode('utf-8')
                telegram_response = json.loads(response_text)
                
                if telegram_response.get('ok'):
                    result['checks']['test_message_sent'] = True
                    result['success'] = True
                else:
                    error_desc = telegram_response.get('description', 'Unknown')
                    result['errors'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_desc}")
                    
                    if 'chat not found' in error_desc.lower():
                        result['recommendations'].append('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π')
                    elif 'bot was blocked' in error_desc.lower():
                        result['recommendations'].append('–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram')
                        
        except Exception as e:
            result['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if not result['errors']:
        result['success'] = True
        result['message'] = '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'
    else:
        result['message'] = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(result['errors'])}"
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
        'body': json.dumps(result, ensure_ascii=False)
    }