import json
import requests
import os
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Validate Telegram bot token and chat_id
    Args: event with bot_token and chat_id in body
    Returns: validation results and bot info
    '''
    method: str = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        bot_token = body_data.get('bot_token', '').strip()
        chat_id = body_data.get('chat_id', '').strip()
        
        result = {
            'token_valid': False,
            'chat_id_valid': False,
            'bot_info': None,
            'errors': [],
            'suggestions': []
        }
        
        # Validate token format
        if not bot_token:
            result['errors'].append('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω')
        elif ':' not in bot_token or len(bot_token.split(':')) != 2:
            result['errors'].append('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11')
            result['suggestions'].append('–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram')
        else:
            # Check token validity via Telegram API
            try:
                response = requests.get(f'https://api.telegram.org/bot{bot_token}/getMe', timeout=10)
                if response.status_code == 200:
                    bot_data = response.json()
                    if bot_data.get('ok'):
                        result['token_valid'] = True
                        result['bot_info'] = bot_data['result']
                    else:
                        result['errors'].append('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
                elif response.status_code == 401:
                    result['errors'].append('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω')
                else:
                    result['errors'].append('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞')
            except requests.RequestException:
                result['errors'].append('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API')
        
        # Validate chat_id format
        if not chat_id:
            result['errors'].append('Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω')
        elif not (chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit())):
            result['errors'].append('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789')
            result['suggestions'].append('–ù–∞–π–¥–∏—Ç–µ –≤–∞—à Chat ID —á–µ—Ä–µ–∑ @userinfobot')
        else:
            # Test message sending if token is valid
            if result['token_valid']:
                try:
                    test_response = requests.post(
                        f'https://api.telegram.org/bot{bot_token}/sendMessage',
                        json={
                            'chat_id': chat_id,
                            'text': 'ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - —ç—Ç–æ—Ç Chat ID —Ä–∞–±–æ—Ç–∞–µ—Ç!',
                            'disable_notification': True
                        },
                        timeout=10
                    )
                    if test_response.status_code == 200:
                        test_data = test_response.json()
                        if test_data.get('ok'):
                            result['chat_id_valid'] = True
                        else:
                            error_desc = test_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                            if 'chat not found' in error_desc.lower():
                                result['errors'].append('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ—Ç—É –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                            elif 'blocked' in error_desc.lower():
                                result['errors'].append('–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
                            else:
                                result['errors'].append(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_desc}')
                    else:
                        result['errors'].append('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                except requests.RequestException:
                    result['errors'].append('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
        
        # Generate QR code data for easy setup
        if result['token_valid'] and result['bot_info']:
            bot_username = result['bot_info'].get('username', '')
            if bot_username:
                result['qr_data'] = f'https://t.me/{bot_username}'
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps(result, ensure_ascii=False)
        }
        
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON'})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'})
        }