import json
import os
import urllib.request
import urllib.parse
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≤ Telegram –±–æ—Ç —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–æ–π "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
    Args: event - dict —Å httpMethod, body, headers
          context - object —Å request_id –∏ –¥—Ä—É–≥–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    Returns: HTTP response dict
    '''
    method: str = event.get('httpMethod', 'POST')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    try:
        body_data = json.loads(event.get('body', '{}'))
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'})
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    name = body_data.get('name', '').strip()
    contact = body_data.get('contact', '').strip()
    service = body_data.get('service', '').strip()
    
    if not all([name, contact, service]):
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'})
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
    if service != '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞':
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞ "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã)
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN_NEW') or os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID_NEW') or os.environ.get('TELEGRAM_CHAT_ID')
    
    print(f"DEBUG: bot_token exists: {bool(bot_token)}")
    print(f"DEBUG: chat_id: {chat_id}")
    
    if not bot_token:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
        }
    
    if not chat_id:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
        }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ - –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã)
    if ':' in chat_id or len(chat_id) > 15:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'TELEGRAM_CHAT_ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã - –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã –º–µ—Å—Ç–∞–º–∏'})
        }
    
    if ':' not in bot_token or len(bot_token) < 40:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'TELEGRAM_BOT_TOKEN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å : –∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã'})
        }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    urgency = body_data.get('urgency', '–ù–µ–¥–µ–ª—è')
    message_text = body_data.get('message', '').strip()
    
    telegram_message = f"""üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –Æ—Ä–ó–∞—â–∏—Ç–∞!

üë§ –ö–ª–∏–µ–Ω—Ç: {name}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}
‚öñÔ∏è –£—Å–ª—É–≥–∞: {service}
‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text if message_text else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üÜî ID –∑–∞—è–≤–∫–∏: {getattr(context, 'request_id', 'unknown')}
üìÖ –í—Ä–µ–º—è: {body_data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    try:
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        print(f"DEBUG: Sending to Telegram URL: {telegram_url[:50]}...")
        
        data = {
            'chat_id': chat_id,
            'text': telegram_message,
            'parse_mode': 'HTML'
        }
        
        encoded_data = urllib.parse.urlencode(data).encode('utf-8')
        
        req = urllib.request.Request(
            telegram_url,
            data=encoded_data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        with urllib.request.urlopen(req, timeout=10) as response:
            response_text = response.read().decode('utf-8')
            print(f"DEBUG: Telegram response: {response_text}")
            telegram_response = json.loads(response_text)
            
            if not telegram_response.get('ok'):
                print(f"ERROR: Telegram API error: {telegram_response}")
                raise Exception(f"Telegram API error: {telegram_response}")
    
    except Exception as e:
        print(f"ERROR: Exception in Telegram send: {str(e)}")
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}'})
        }
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
        'body': json.dumps({
            'success': True,
            'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
            'request_id': getattr(context, 'request_id', 'unknown')
        })
    }