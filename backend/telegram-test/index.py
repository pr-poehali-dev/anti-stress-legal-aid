import json
import os
import urllib.request
import urllib.parse
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    Args: event - dict —Å httpMethod
          context - object —Å request_id
    Returns: HTTP response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    '''
    method: str = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {
        'bot_token_exists': bool(bot_token),
        'bot_token_format': False,
        'chat_id_exists': bool(chat_id),
        'chat_id_format': False,
        'telegram_api_test': False,
        'errors': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if bot_token:
        if ':' in bot_token and len(bot_token.split(':')) == 2:
            bot_part, hash_part = bot_token.split(':')
            if bot_part.isdigit() and len(hash_part) > 30:
                results['bot_token_format'] = True
            else:
                results['errors'].append('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN')
        else:
            results['errors'].append('TELEGRAM_BOT_TOKEN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ":"')
    else:
        results['errors'].append('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç chat_id
    if chat_id:
        if chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
            results['chat_id_format'] = True
        else:
            results['errors'].append('TELEGRAM_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
    else:
        results['errors'].append('TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API Telegram –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if results['bot_token_format'] and results['chat_id_format']:
        try:
            test_message = f"üß™ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram\n\n‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\nüÜî Request ID: {getattr(context, 'request_id', 'unknown')}"
            
            telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            data = {
                'chat_id': chat_id,
                'text': test_message
            }
            
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            
            req = urllib.request.Request(
                telegram_url,
                data=encoded_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            with urllib.request.urlopen(req, timeout=10) as response:
                response_text = response.read().decode('utf-8')
                telegram_response = json.loads(response_text)
                
                if telegram_response.get('ok'):
                    results['telegram_api_test'] = True
                else:
                    results['errors'].append(f"Telegram API –æ—à–∏–±–∫–∞: {telegram_response.get('description', 'Unknown error')}")
        
        except Exception as e:
            results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {str(e)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
    status = "‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!" if results['telegram_api_test'] else "‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
    
    response_data = {
        'status': status,
        'details': results,
        'recommendations': []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not results['bot_token_exists']:
        response_data['recommendations'].append('–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Å–µ–∫—Ä–µ—Ç—ã')
    elif not results['bot_token_format']:
        response_data['recommendations'].append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 123456789:AAA...)')
    
    if not results['chat_id_exists']:
        response_data['recommendations'].append('–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHAT_ID –≤ —Å–µ–∫—Ä–µ—Ç—ã')
    elif not results['chat_id_format']:
        response_data['recommendations'].append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç TELEGRAM_CHAT_ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)')
    
    if results['bot_token_format'] and results['chat_id_format'] and not results['telegram_api_test']:
        response_data['recommendations'].append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π')
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps(response_data, ensure_ascii=False, indent=2)
    }